// Generated by gencpp from file osr_msgs/Track.msg
// DO NOT EDIT!


#ifndef OSR_MSGS_MESSAGE_TRACK_H
#define OSR_MSGS_MESSAGE_TRACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <osr_msgs/BoundingBox.h>
#include <osr_msgs/BoundingBox.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>

namespace osr_msgs
{
template <class ContainerAllocator>
struct Track_
{
  typedef Track_<ContainerAllocator> Type;

  Track_()
    : id(0)
    , type(0)
    , posture(0)
    , bbox_pose()
    , bbox_velocity()
    , pose()
    , twist()  {
    }
  Track_(const ContainerAllocator& _alloc)
    : id(0)
    , type(0)
    , posture(0)
    , bbox_pose(_alloc)
    , bbox_velocity(_alloc)
    , pose(_alloc)
    , twist(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _posture_type;
  _posture_type posture;

   typedef  ::osr_msgs::BoundingBox_<ContainerAllocator>  _bbox_pose_type;
  _bbox_pose_type bbox_pose;

   typedef  ::osr_msgs::BoundingBox_<ContainerAllocator>  _bbox_velocity_type;
  _bbox_velocity_type bbox_velocity;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_type;
  _twist_type twist;





  typedef boost::shared_ptr< ::osr_msgs::Track_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::osr_msgs::Track_<ContainerAllocator> const> ConstPtr;

}; // struct Track_

typedef ::osr_msgs::Track_<std::allocator<void> > Track;

typedef boost::shared_ptr< ::osr_msgs::Track > TrackPtr;
typedef boost::shared_ptr< ::osr_msgs::Track const> TrackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::osr_msgs::Track_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::osr_msgs::Track_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace osr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'osr_msgs': ['/home/sourcecodes/SNU_USR_dev/src/osr/osr_msgs/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::osr_msgs::Track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::osr_msgs::Track_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::osr_msgs::Track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::osr_msgs::Track_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osr_msgs::Track_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osr_msgs::Track_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::osr_msgs::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5743d60b28dea66cea0aa710dada021";
  }

  static const char* value(const ::osr_msgs::Track_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5743d60b28dea66ULL;
  static const uint64_t static_value2 = 0xcea0aa710dada021ULL;
};

template<class ContainerAllocator>
struct DataType< ::osr_msgs::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "osr_msgs/Track";
  }

  static const char* value(const ::osr_msgs::Track_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::osr_msgs::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####################\n\
# osr_msgs track message\n\
####################\n\
# ID\n\
uint8 id\n\
\n\
# Type (1: PERSON, 2: CAR)\n\
uint8 type\n\
\n\
# Posture (1: STAND, 2: SIT DOWN, 3: LIE DOWN)\n\
uint8 posture\n\
\n\
# Activity score\n\
# float32 activity\n\
\n\
# Bounding box\n\
osr_msgs/BoundingBox bbox_pose\n\
osr_msgs/BoundingBox bbox_velocity\n\
\n\
# State\n\
geometry_msgs/Pose pose\n\
geometry_msgs/Twist twist\n\
\n\
# 3D Bounding Box\n\
\n\
\n\
================================================================================\n\
MSG: osr_msgs/BoundingBox\n\
####################\n\
# osr_msgs bounding box message\n\
####################\n\
\n\
uint32 x\n\
uint32 y \n\
uint32 height\n\
uint32 width\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::osr_msgs::Track_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::osr_msgs::Track_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.posture);
      stream.next(m.bbox_pose);
      stream.next(m.bbox_velocity);
      stream.next(m.pose);
      stream.next(m.twist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Track_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::osr_msgs::Track_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::osr_msgs::Track_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "posture: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.posture);
    s << indent << "bbox_pose: ";
    s << std::endl;
    Printer< ::osr_msgs::BoundingBox_<ContainerAllocator> >::stream(s, indent + "  ", v.bbox_pose);
    s << indent << "bbox_velocity: ";
    s << std::endl;
    Printer< ::osr_msgs::BoundingBox_<ContainerAllocator> >::stream(s, indent + "  ", v.bbox_velocity);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OSR_MSGS_MESSAGE_TRACK_H
