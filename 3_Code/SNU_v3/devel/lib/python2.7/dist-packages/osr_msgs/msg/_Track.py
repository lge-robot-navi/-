# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from osr_msgs/Track.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import osr_msgs.msg
import geometry_msgs.msg

class Track(genpy.Message):
  _md5sum = "a5743d60b28dea66cea0aa710dada021"
  _type = "osr_msgs/Track"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """####################
# osr_msgs track message
####################
# ID
uint8 id

# Type (1: PERSON, 2: CAR)
uint8 type

# Posture (1: STAND, 2: SIT DOWN, 3: LIE DOWN)
uint8 posture

# Activity score
# float32 activity

# Bounding box
osr_msgs/BoundingBox bbox_pose
osr_msgs/BoundingBox bbox_velocity

# State
geometry_msgs/Pose pose
geometry_msgs/Twist twist

# 3D Bounding Box


================================================================================
MSG: osr_msgs/BoundingBox
####################
# osr_msgs bounding box message
####################

uint32 x
uint32 y 
uint32 height
uint32 width

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['id','type','posture','bbox_pose','bbox_velocity','pose','twist']
  _slot_types = ['uint8','uint8','uint8','osr_msgs/BoundingBox','osr_msgs/BoundingBox','geometry_msgs/Pose','geometry_msgs/Twist']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,type,posture,bbox_pose,bbox_velocity,pose,twist

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Track, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.type is None:
        self.type = 0
      if self.posture is None:
        self.posture = 0
      if self.bbox_pose is None:
        self.bbox_pose = osr_msgs.msg.BoundingBox()
      if self.bbox_velocity is None:
        self.bbox_velocity = osr_msgs.msg.BoundingBox()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.twist is None:
        self.twist = geometry_msgs.msg.Twist()
    else:
      self.id = 0
      self.type = 0
      self.posture = 0
      self.bbox_pose = osr_msgs.msg.BoundingBox()
      self.bbox_velocity = osr_msgs.msg.BoundingBox()
      self.pose = geometry_msgs.msg.Pose()
      self.twist = geometry_msgs.msg.Twist()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B8I13d().pack(_x.id, _x.type, _x.posture, _x.bbox_pose.x, _x.bbox_pose.y, _x.bbox_pose.height, _x.bbox_pose.width, _x.bbox_velocity.x, _x.bbox_velocity.y, _x.bbox_velocity.height, _x.bbox_velocity.width, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.bbox_pose is None:
        self.bbox_pose = osr_msgs.msg.BoundingBox()
      if self.bbox_velocity is None:
        self.bbox_velocity = osr_msgs.msg.BoundingBox()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.twist is None:
        self.twist = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 139
      (_x.id, _x.type, _x.posture, _x.bbox_pose.x, _x.bbox_pose.y, _x.bbox_pose.height, _x.bbox_pose.width, _x.bbox_velocity.x, _x.bbox_velocity.y, _x.bbox_velocity.height, _x.bbox_velocity.width, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z,) = _get_struct_3B8I13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B8I13d().pack(_x.id, _x.type, _x.posture, _x.bbox_pose.x, _x.bbox_pose.y, _x.bbox_pose.height, _x.bbox_pose.width, _x.bbox_velocity.x, _x.bbox_velocity.y, _x.bbox_velocity.height, _x.bbox_velocity.width, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.bbox_pose is None:
        self.bbox_pose = osr_msgs.msg.BoundingBox()
      if self.bbox_velocity is None:
        self.bbox_velocity = osr_msgs.msg.BoundingBox()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.twist is None:
        self.twist = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 139
      (_x.id, _x.type, _x.posture, _x.bbox_pose.x, _x.bbox_pose.y, _x.bbox_pose.height, _x.bbox_pose.width, _x.bbox_velocity.x, _x.bbox_velocity.y, _x.bbox_velocity.height, _x.bbox_velocity.width, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z,) = _get_struct_3B8I13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B8I13d = None
def _get_struct_3B8I13d():
    global _struct_3B8I13d
    if _struct_3B8I13d is None:
        _struct_3B8I13d = struct.Struct("<3B8I13d")
    return _struct_3B8I13d
